// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import com.lloseng.ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. *  * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	private ChatIF clientUI;	private ObservableClient client;	public static final String CONNECTION_CLOSED = "Vous avez ete deconnecte.";	public static final String CONNECTION_ESTABLISHED = "Connection etablie : vous etes connecte !";	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 * 	 * @param host	 *            The server to connect to.	 * @param port	 *            The port number to connect on.	 * @param clientUI	 *            The interface type variable.	 */	public ChatClient(String host, int port, ChatIF clientUI)			throws IOException {		client = new ObservableClient(host, port);		client.addObserver(this);		this.clientUI = clientUI;		clientUI.display("Bienvenue sur le GCAM Chat Client @ " + host + ":"				+ port				+ " !\nVeuillez utiliser #login <pseudo> pour vous connecter.");	}	// Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 * 	 * @param msg	 *            The message from the server.	 */	public void handleMessageFromServer(Object msg) {		clientUI.display(msg.toString());	}	/**	 * This method handles all data coming from the UI	 * 	 * @param message	 *            The message from the UI.	 */	public void handleMessageFromClientUI(String message) { // WARNING		/*		 * if (!(message.startsWith("#set") || message.startsWith("#get") ||		 * message.startsWith("#login") || message.startsWith("#pseudo"))) { try		 * { client.sendToServer(message); } catch (IOException e) { if		 * (client.isConnected()) {		 * clientUI.display("Could not send message to server."); } else {		 * clientUI.display(		 * "Vous n'etes pas connecte ! Veuillez utiliser la commande #login <pseudo>"		 * ); } } }		 */		if (isCommand(message)) {			handleCommand(message);		} else {			try {				client.sendToServer(message);			} catch (IOException e) {				if (client.isConnected()) {					clientUI.display("Could not send message to server.");				} else {					clientUI							.display("Vous n'etes pas connecte ! Veuillez utiliser la commande #login <pseudo>");				}			}		}	}	public boolean isCommand(String s) {		return (s.startsWith("#"));	}	public void handleCommand(String s) {		s = s.substring(1);		if (s.startsWith("pseudo ")) {			if (client.isConnected()) {				if (!(s.substring(7).startsWith(" ")) && (s.length() >= 8)) {					try {						client.sendToServer("#" + s);					} catch (IOException e) {						e.printStackTrace();					}				}			}		} else if (s.equals("quit")) {			if (client.isConnected()) {				try {					client.sendToServer("#" + s);					client.closeConnection();				} catch (IOException e) {					e.printStackTrace();				}			}			System.exit(1);		} else if (s.equals("logoff")) {			if (client.isConnected()) {				try {					client.sendToServer("#" + s);					client.closeConnection();				} catch (IOException e) {					e.printStackTrace();				}			} else {				clientUI						.display("Deconnection impossible : vous n'etes pas connecte !");			}		} else if (s.startsWith("sethost ")) {			s = s.substring(8);			if (!client.isConnected()) {				client.setHost(s);				clientUI.display("Le nouvel host est : " + s);			} else {				clientUI						.display("Changement d'hote impossible : vous etes deja connecte !");			}		} else if (s.startsWith("setport ")) {			s = s.substring(8);			if (!client.isConnected()) {				try {					client.setPort(Integer.parseInt(s));				} catch (ArrayIndexOutOfBoundsException e) {					s = "5555";					client.setPort(Integer.parseInt(s));				}				clientUI.display("Le nouveau port est : " + s);			} else {				clientUI						.display("Changement de port impossible : vous etes deja connecte !");			}		} else if (s.startsWith("login")) {			if (client.isConnected()) {				clientUI						.display("Connection impossible : vous etes deja connecte !");			} else {				// if (!(s.substring(6).startsWith(" ")) && (s.length() >= 7)) {				if ( (s.length() < 7) || s.substring(5).startsWith(" ") ) { // le 6eme caractere est un espace					clientUI.display("." + s + ".");					if (s.equals("login") || (s.startsWith("login "))) {						int id = (int) (Math.random() * (1000 - 1)) + 1;						s = "login Guest" + (id < 10 ? "0" : "")								+ (id < 100 ? "0" : "")								+ (id < 1000 ? "0" : "") + id;					}					try {						client.openConnection();						try {							client.sendToServer("#" + s);						} catch (Exception e) {							e.printStackTrace();						}					} catch (IOException e) {						clientUI								.display("Erreur : le serveur est hors ligne !");					}				}			}		} else if (s.equals("gethost")) {			clientUI.display("L'host est : " + client.getHost());		} else if (s.equals("getport")) {			clientUI.display("Le port est : " + client.getPort());		}	}	/**	 * This method terminates the client.	 */	public void quit() {		try {			client.closeConnection();		} catch (IOException e) {		}		System.exit(0);	}	protected void connectionClosed() {		clientUI.display(CONNECTION_CLOSED);	}	protected void connectionEstablished() {		clientUI.display(CONNECTION_ESTABLISHED);	}	protected void connectionException(Exception e) {		clientUI.display("Probleme de connection (" + e.toString() + ")");	}	public void update(Observable arg0, Object arg1) {		if (arg1 instanceof String) {			if (arg1.toString().equals(client.getConnectionClosed())) {				connectionClosed();			} else if (arg1.toString()					.equals(client.getConnectionEstablished())) {				connectionEstablished();			} else {				handleMessageFromServer(arg1.toString());			}		} else if (arg1 instanceof Exception) {			connectionException((Exception) arg1);		}	}	public static String getConnectionClosed() {		return CONNECTION_CLOSED;	}	public static String getConnectionEstablished() {		return CONNECTION_ESTABLISHED;	}}// End of ChatClient class